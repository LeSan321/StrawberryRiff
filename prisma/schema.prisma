
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAnonymous   Boolean   @default(false)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  songs         Song[]
  playlists     Playlist[]
  
  // Friend relationships - one way approval
  sentRequests     Friendship[] @relation("FriendshipRequester")
  receivedRequests Friendship[] @relation("FriendshipReceiver")
  
  // Email invitations sent
  emailInvitations EmailInvitation[]
  
  // Liked songs and reactions
  likedSongs SongLike[]
  reactions  SongReaction[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Song {
  id            String   @id @default(cuid())
  title         String
  genre         String?
  description   String?
  note          String?  // Optional note/dedication, max 150 chars
  mood          String?  // Mood tag: uplifting, dreamy, cinematic, melancholy, mysterious, hopeful
  filePath      String   // Path to MP3 file
  thumbnailPath String? // Path to thumbnail image
  duration      Int?    // Duration in seconds
  fileSize      Int?    // File size in bytes
  isPublic      Boolean  @default(true)
  downloadCount Int      @default(0)
  playCount     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  uploader   User   @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId String
  
  // Many-to-many relations
  playlists PlaylistSong[]
  likes     SongLike[]
  reactions SongReaction[]
  
  @@map("songs")
}

model Friendship {
  id        String           @id @default(cuid())
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  requester   User   @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId String
  
  receiver   User   @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([requesterId, receiverId])
  @@map("friendships")
}

model EmailInvitation {
  id           String           @id @default(cuid())
  email        String
  inviterName  String?
  inviterEmail String
  message      String?
  status       InvitationStatus @default(PENDING)
  token        String           @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  expiresAt    DateTime

  inviter   User   @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId String

  @@unique([email, inviterId])
  @@map("email_invitations")
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  
  songs PlaylistSong[]
  
  @@map("playlists")
}

model PlaylistSong {
  id       String   @id @default(cuid())
  position Int      @default(0)
  addedAt  DateTime @default(now())

  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String
  
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String

  @@unique([playlistId, songId])
  @@map("playlist_songs")
}

model SongLike {
  id      String   @id @default(cuid())
  likedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String

  @@unique([userId, songId])
  @@map("song_likes")
}

model SongReaction {
  id        String       @id @default(cuid())
  type      ReactionType
  reactedAt DateTime     @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String

  @@unique([userId, songId, type])
  @@map("song_reactions")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum ReactionType {
  FELT_THIS        // ‚ù§Ô∏è I felt this
  LISTENING_LOOP   // üéß Listening on loop
  WANT_MORE        // üîÅ Want more like this
  HITS_HARD        // üî• This one hits hard
}
